; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "APP-ENV-Installer"
#define MyAppVersion "1.0"
#define MyAppPublisher "Abi-dev-engineer"
#define MyAppURL "https://www.example.com/"
#define MyAppExeName "MyProg-x64.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".exe"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{ABDA2ABD-71AB-40AB-9AB0-DCD2990AB09B}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
OutputDir=.
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\APP-ENV
ChangesAssociations=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=APP-ENV-Installer
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Run]
; Define the installation path
#define InstallPath "{pf64}\Java\jdk-17.0.11"
#define AppENVPath "{code:GetDir}"

; Check if the file exists and only download if not NOTE : replace jdk download URL
Filename: "{sys}\cmd.exe"; Parameters: "/C if not exist ""{#AppENVPath}\java-17.0.11-Wx64.exe"" (powershell -Command Invoke-WebRequest -Uri 'https://jdk-17.0.11_download_URL_windows-x64_bin.exe' -OutFile '{#AppENVPath}\java-17.0.11-Wx64.exe')"; StatusMsg: "Downloading the necessary files..."; Flags: runhidden

; Run the installer with custom path and silent mode
Filename: "{#AppENVPath}\java-17.0.11-Wx64.exe"; Parameters: "/s INSTALLDIR=""{#InstallPath}"""; StatusMsg: "Installing the application..."; Flags: runhidden

; Verify the JDK installation path exists, then set JAVA_HOME
Filename: "{sys}\cmd.exe"; Parameters: "/C if exist ""{#InstallPath}\bin\java.exe"" (setx JAVA_HOME ""{#InstallPath}"" /M)"; StatusMsg: "Setting JAVA_HOME..."; Flags: runhidden

; Delete the downloaded JDK installer file after installation
Filename: "{sys}\cmd.exe"; Parameters: "/C del /F /Q ""{#AppENVPath}\java-17.0.11-Wx64.exe"""; StatusMsg: "Cleaning up..."; Flags: runhidden

;Check if the jar exists and only download if not NOTE : replace APP-ENV jar download URL
Filename: "{sys}\cmd.exe"; Parameters: "/C if not exist ""{#AppENVPath}\APP-ENV-Installer.jar"" (powershell -Command Invoke-WebRequest -Uri 'https://APP-ENV-Installer.jar' -OutFile '{#AppENVPath}\CIARSS-FEP-Installer.jar')"; StatusMsg: "Downloading the CIARSS installation jar files..."; Flags: runhidden

[Code]
procedure RunJarFromInstallerPath;
var
  JarPath, loggerPath, JavaPath, cmdLine, ExistingJavaHome, SelectedDir: string;
  ErrorCode: Integer;
begin
  SelectedDir := WizardForm.DirEdit.Text;
  JarPath := SelectedDir + '\APP-ENV-Installer.jar';
  loggerPath := SelectedDir + '\installer.log';

  JavaPath := ExpandConstant('{#InstallPath}\bin\java.exe'); // Default Java path from new installation
  
  if not FileExists(JarPath) then
  begin
    MsgBox('The file jar was not found in the installer directory. ' + JarPath, mbError, MB_OK);
    Exit;
  end;

  // Check if the installed Java executable exists
  if not FileExists(JavaPath) then
  begin
    // If Java installation failed, fallback to existing JAVA_HOME
    ExistingJavaHome := GetEnv('JAVA_HOME');
    if (ExistingJavaHome <> '') and FileExists(ExistingJavaHome + '\bin\java.exe') then
    begin
      JavaPath := ExistingJavaHome + '\bin\java.exe';
    end
    else
    begin
      MsgBox('No valid Java installation found. Please ensure JAVA_HOME is set or install Java manually.', mbError, MB_OK);
      Exit;
    end;
  end;

  // Update status message dynamically
  WizardForm.StatusLabel.Caption := 'Running APP-ENV-Installer jar...';
  cmdLine := '-jar "' + JarPath + '" > "' + loggerPath + '" 2>&1';
    
  // Run the JAR file using the determined Java path
  Exec(JavaPath, cmdLine, SelectedDir, SW_HIDE, ewWaitUntilTerminated, ErrorCode);
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    RunJarFromInstallerPath;
  end;
end;

function GetDir(Value: string): string;
begin
  Result := WizardForm.DirEdit.Text;
end;